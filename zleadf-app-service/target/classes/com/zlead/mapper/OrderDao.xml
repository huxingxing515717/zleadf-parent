<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zlead.dao.OrderDao">

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.zlead.entity.OrderEntity" id="orderMap">
        <result property="id" column="id"/>
        <result property="sn" column="sn"/>
        <result property="orderType" column="order_type"/>
        <result property="buyType" column="buy_type"/>
        <result property="shopId" column="shop_id"/>
        <result property="shippingType" column="shipping_type"/>
        <result property="shopName" column="shop_name"/>
        <result property="payType" column="pay_type"/>
        <result property="goodsAmount" column="goods_amount"/>
        <result property="shippingCost" column="shipping_cost"/>
        <result property="payableAmount" column="payable_amount"/>
        <result property="payPoint" column="pay_point"/>
        <result property="actualPayments" column="actual_payments"/>
        <result property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="shippingCorpno" column="shipping_corpno"/>
        <result property="shippingCorpname" column="shipping_corpname"/>
        <result property="deliveryNo" column="delivery_no"/>
        <result property="consignee" column="consignee"/>
        <result property="address" column="address"/>
        <result property="postCode" column="post_code"/>
        <result property="phone" column="phone"/>
        <result property="telephone" column="telephone"/>
        <result property="email" column="email"/>
        <result property="needInvoide" column="need_invoide"/>
        <result property="createDate" column="create_date"/>
        <result property="expireDate" column="expire_date"/>
        <result property="isExpire" column="is_expire"/>
        <result property="paySn" column="pay_sn"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="modifyDate" column="modify_date"/>
        <result property="isDelete" column="is_delete"/>
        <result property="discount" column="discount"/>
        <result property="status" column="status"/>
        <result property="voucherId" column="voucher_id"/>
        <result property="remark" column="remark"/>
        <result property="rebateAmount" column="rebate_amount"/>
        <result property="goodscnt" column="goodscnt"/>
        <result property="priceType" column="price_type"/>
        <collection property="OrderGoods" ofType="com.zlead.entity.OrderGoodsEntity" resultMap="orderGoodsMap"/>
        <!--       <result property="OrderGoodsListVo"  column="{orderId=id}"   select="selectGoods" />

              <association property="OrderGoodsListVo" column="id" select="queryGoodsList">

              <collection property="problemModelList" column="id" select="queryGoodsList"/>
               <collection property="OrderGoodsListVo" ofType="com.zlead.entity.OrderGoodsEntity">
                  <result property="id" column="id"/>
                  <result property="orderId" column="order_id"/>
                  <result property="goodsId" column="goods_id"/>
                  <result property="goodsSn" column="goods_sn"/>
                  <result property="goodsName" column="goods_name"/>
                  <result property="goodsImg" column="goods_img"/>
                  <result property="price" column="price"/>
                  <result property="point" column="point"/>
                  <result property="goodsPoint" column="goods_point"/>
                  <result property="discount" column="discount"/>
                  <result property="count" column="count"/>
                  <result property="commentStatus" column="comment_status"/>
                  <result property="status" column="status"/>
                  <result property="createDate" column="create_date"/>
                  <result property="updateDate" column="update_date"/>
                  <result property="remark" column="remark"/>
                  <result property="marketPrice" column="market_price"/>
               </collection> -->

    </resultMap>

    <resultMap type="com.zlead.entity.OrderGoodsEntity" id="orderGoodsMap">
        <result property="id" column="id"/>
        <result property="orderId" column="order_id"/>
        <result property="goodsId" column="goods_id"/>
        <result property="goodsSn" column="goods_sn"/>
        <result property="goodsName" column="goods_name"/>
        <result property="goodsImg" column="goods_img"/>
        <result property="price" column="price"/>
        <result property="point" column="point"/>
        <result property="goodsPoint" column="goods_point"/>
        <result property="discount" column="discount"/>
        <result property="count" column="count"/>
        <result property="commentStatus" column="comment_status"/>
        <result property="status" column="status"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
        <result property="remark" column="remark"/>
        <result property="marketPrice" column="market_price"/>
        <result property="goodsTotalPrice" column="goods_total_price"/>
    </resultMap>

    <resultMap type="com.zlead.entity.OrderEntity" id="newOrderMap">
    <result property="id" column="id"/>
    <result property="sn" column="sn"/>
    <result property="orderType" column="order_type"/>
    <result property="buyType" column="buy_type"/>
    <result property="shopId" column="shop_id"/>
    <result property="shippingType" column="shipping_type"/>
    <result property="shopName" column="shop_name"/>
    <result property="payType" column="pay_type"/>
    <result property="goodsAmount" column="goods_amount"/>
    <result property="shippingCost" column="shipping_cost"/>
    <result property="payableAmount" column="payable_amount"/>
    <result property="payPoint" column="pay_point"/>
    <result property="actualPayments" column="actual_payments"/>
    <result property="memberId" column="member_id"/>
    <result property="memberName" column="member_name"/>
    <result property="shippingCorpno" column="shipping_corpno"/>
    <result property="shippingCorpname" column="shipping_corpname"/>
    <result property="deliveryNo" column="delivery_no"/>
    <result property="consignee" column="consignee"/>
    <result property="address" column="address"/>
    <result property="postCode" column="post_code"/>
    <result property="phone" column="phone"/>
    <result property="telephone" column="telephone"/>
    <result property="email" column="email"/>
    <result property="needInvoide" column="need_invoide"/>
    <result property="createDate" column="create_date"/>
    <result property="expireDate" column="expire_date"/>
    <result property="isExpire" column="is_expire"/>
    <result property="paySn" column="pay_sn"/>
    <result property="paymentDate" column="payment_date"/>
    <result property="modifyDate" column="modify_date"/>
    <result property="isDelete" column="is_delete"/>
    <result property="discount" column="discount"/>
    <result property="status" column="status"/>
    <result property="voucherId" column="voucher_id"/>
    <result property="remark" column="remark"/>
    <result property="rebateAmount" column="rebate_amount"/>
    <result property="goodscnt" column="goodscnt"/>
    <result property="priceType" column="price_type"/>
    </resultMap>

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.zlead.entity.OrderEntity" id="orderimp">
        <result property="id" column="id"/>
        <result property="sn" column="sn"/>
        <result property="orderType" column="order_type"/>
        <result property="buyType" column="buy_type"/>
        <result property="shopId" column="shop_id"/>
        <result property="shippingType" column="shipping_type"/>
        <result property="shopName" column="shop_name"/>
        <result property="payType" column="pay_type"/>
        <result property="goodsAmount" column="goods_amount"/>
        <result property="shippingCost" column="shipping_cost"/>
        <result property="payableAmount" column="payable_amount"/>
        <result property="payPoint" column="pay_point"/>
        <result property="actualPayments" column="actual_payments"/>
        <result property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="shippingCorpno" column="shipping_corpno"/>
        <result property="shippingCorpname" column="shipping_corpname"/>
        <result property="deliveryNo" column="delivery_no"/>
        <result property="consignee" column="consignee"/>
        <result property="address" column="address"/>
        <result property="postCode" column="post_code"/>
        <result property="phone" column="phone"/>
        <result property="telephone" column="telephone"/>
        <result property="email" column="email"/>
        <result property="needInvoide" column="need_invoide"/>
        <result property="createDate" column="create_date"/>
        <result property="expireDate" column="expire_date"/>
        <result property="isExpire" column="is_expire"/>
        <result property="paySn" column="pay_sn"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="modifyDate" column="modify_date"/>
        <result property="isDelete" column="is_delete"/>
        <result property="discount" column="discount"/>
        <result property="voucherId" column="voucher_id"/>
        <result property="status" column="status"/>
        <result property="remark" column="remark"/>
        <result property="rebateAmount" column="rebate_amount"/>
        <result property="userId" column="user_id"/>
        <result property="priceType" column="price_type"/>
        <collection property="OrderGoods" ofType="com.zlead.entity.OrderGoodsEntity">
            <result property="id" column="id"/>
            <result property="orderId" column="order_id"/>
            <result property="goodsId" column="goods_id"/>
            <result property="goodsSn" column="goods_sn"/>
            <result property="goodsName" column="goods_name"/>
            <result property="goodsImg" column="goods_img"/>
            <result property="price" column="price"/>
            <result property="point" column="point"/>
            <result property="goodsPoint" column="goods_point"/>
            <result property="discount" column="discount"/>
            <result property="count" column="count"/>
            <result property="commentStatus" column="comment_status"/>
            <result property="status" column="status"/>
            <result property="createDate" column="create_date"/>
            <result property="updateDate" column="update_date"/>
            <result property="remark" column="remark"/>
            <result property="marketPrice" column="market_price"/>
            <result property="goodsTotalPrice" column="goods_total_price"/>
            <collection property="CrmPrdModel" ofType="com.zlead.fplat.entity.CrmPrdModel">
                <result property="modelName" column="model_name"/>
                <result property="picPath" column="pic_path"/>
            </collection>
        </collection>

    </resultMap>

    <resultMap id="orderVo" type="com.zlead.entity.vo.OrderVo" extends="orderMap">
        <collection property="orderGoodsList" column="ID" javaType="java.util.ArrayList"
                    ofType="com.zlead.entity.OrderGoodsEntity"
                    select="com.zlead.dao.OrderGoodsDao.findListByOrderId"/>
    </resultMap>

    <resultMap id="orderCountVo" type="com.zlead.entity.vo.OrderCountVo">
        <result property="status" column="status"/>
        <result property="ordercnt" column="ordercnt"/>
    </resultMap>

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.zlead.entity.vo.OrderListVo" id="orderListVo">
        <result property="orderId" column="id"/>
        <result property="sn" column="sn"/>
        <result property="agentId" column="agent_id"/>
        <result property="agentName" column="agent_name"/>
        <result property="payType" column="pay_type"/>
        <result property="goodsAmount" column="goods_amount"/>
        <result property="shippingCost" column="shipping_cost"/>
        <result property="status" column="status"/>
        <result property="factoryId" column="fact_id" />
    </resultMap>


    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.zlead.entity.vo.OrderDetailVo" id="orderDetailVo">
        <result property="orderId" column="id"/>
        <result property="sn" column="sn"/>
        <result property="agentId" column="agent_id"/>
        <result property="agentName" column="agent_name"/>
        <result property="payType" column="pay_type"/>
        <result property="goodsAmount" column="goods_amount"/>
        <result property="shippingCost" column="shipping_cost"/>
        <result property="status" column="status"/>
        <result property="createDate" column="create_date"/>
        <result column="link_name" property="linkName"/>
        <result column="link_tel" property="linkTel"/>
        <result column="agentAddr" property="agentAddr"/>
        <result column="shipping_type" property="shippingType"/>
        <result column="payment_date" property="payDate"/>

        <result column="consignee" property="consignee"/>
        <result column="phone" property="phone"/>
        <result column="address" property="address"/>
    </resultMap>

    <select id="queryOrderNumber" resultType="Integer">
        SELECT count(id) FROM t_order AS a WHERE a.sn = #{sn}
    </select>


    <insert id="insert" useGeneratedKeys="true" keyColumn="id" keyProperty="id"
            parameterType="com.zlead.entity.OrderEntity">
        INSERT INTO t_order (
        		id,
                sn,
                order_type,
                buy_type,
                shop_id,
                shipping_type,
                shop_name,
                pay_type,
                goods_amount,
                shipping_cost,
                payable_amount,
                pay_point,
                actual_payments,
                member_id,
                member_name,
                shipping_corpno,
                shipping_corpname,
                delivery_no,
                consignee,
                address,
                post_code,
                phone,
                telephone,
                email,
                need_invoide,
                create_date,
                expire_date,
                is_expire,
                pay_sn,
                payment_date,
                modify_date,
                is_delete,
                discount,
                status,
                remark,
                rebate_amount,
                user_id,
                price_type
                ) VALUES (
                #{id},
                #{sn},
                #{orderType},
                #{buyType},
                #{shopId},
                #{shippingType},
                #{shopName},
                #{payType},
                #{goodsAmount},
                #{shippingCost},
                #{payableAmount},
                #{payPoint},
                #{actualPayments},
                #{memberId},
                #{memberName},
                #{shippingCorpno},
                #{shippingCorpname},
                #{deliveryNo},
                #{consignee},
                #{address},
                #{postCode},
                #{phone},
                #{telephone},
                #{email},
                #{needInvoide},
                #{createDate},
                #{expireDate},
                #{isExpire},
                #{paySn},
                #{paymentDate},
                #{modifyDate},
                #{isDelete},
                #{discount},
                #{status},
                #{remark},
                #{rebateAmount},
                #{userId},
                #{priceType}
                )
    </insert>

    <insert id="insertSelective" parameterType="com.zlead.entity.OrderEntity">
        <!--
              common class -  @ET
          model 属性定义, do not modify.
        -->
        insert into t_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="sn != null">
                sn,
            </if>
            <if test="orderType != null">
                order_type,
            </if>
            <if test="buyType != null">
                buy_type,
            </if>
            <if test="shopId != null">
                shop_id,
            </if>
            <if test="shippingType != null">
                shipping_type,
            </if>
            <if test="shopName != null">
                shop_name,
            </if>
            <if test="payType != null">
                pay_type,
            </if>
            <if test="goodsAmount != null">
                goods_amount,
            </if>
            <if test="shippingCost != null">
                shipping_cost,
            </if>
            <if test="payableAmount != null">
                payable_amount,
            </if>
            <if test="payPoint != null">
                pay_point,
            </if>
            <if test="actualPayments != null">
                actual_payments,
            </if>
            <if test="memberId != null">
                member_id,
            </if>
            <if test="memberName != null">
                member_name,
            </if>
            <if test="shippingCorpno != null">
                shipping_corpno,
            </if>
            <if test="shippingCorpname != null">
                shipping_corpname,
            </if>
            <if test="deliveryNo != null">
                delivery_no,
            </if>
            <if test="consignee != null">
                consignee,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="postCode != null">
                post_code,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="telephone != null">
                telephone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="needInvoide != null">
                need_invoide,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="expireDate != null">
                expire_date,
            </if>
            <if test="isExpire != null">
                is_expire,
            </if>
            <if test="paySn != null">
                pay_sn,
            </if>
            <if test="paymentDate != null">
                payment_date,
            </if>
            <if test="modifyDate != null">
                modify_date,
            </if>
            <if test="isDelete != null">
                is_delete,
            </if>
            <if test="discount != null">
                discount,
            </if>
            <if test="rebateAmount != null">
                rebate_amount,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="sn != null">
                #{sn,jdbcType=VARCHAR},
            </if>
            <if test="orderType != null">
                #{orderType,jdbcType=BIT},
            </if>
            <if test="buyType != null">
                #{buyType,jdbcType=BIT},
            </if>
            <if test="shopId != null">
                #{shopId,jdbcType=BIGINT},
            </if>
            <if test="shippingType != null">
                #{shippingType,jdbcType=BIT},
            </if>
            <if test="shopName != null">
                #{shopName,jdbcType=VARCHAR},
            </if>
            <if test="payType != null">
                #{payType,jdbcType=BIT},
            </if>
            <if test="goodsAmount != null">
                #{goodsAmount,jdbcType=DECIMAL},
            </if>
            <if test="shippingCost != null">
                #{shippingCost,jdbcType=DECIMAL},
            </if>
            <if test="payableAmount != null">
                #{payableAmount,jdbcType=DECIMAL},
            </if>
            <if test="payPoint != null">
                #{payPoint,jdbcType=BIGINT},
            </if>
            <if test="actualPayments != null">
                #{actualPayments,jdbcType=DECIMAL},
            </if>
            <if test="memberId != null">
                #{memberId,jdbcType=BIGINT},
            </if>
            <if test="memberName != null">
                #{memberName,jdbcType=VARCHAR},
            </if>
            <if test="shippingCorpno != null">
                #{shippingCorpno,jdbcType=VARCHAR},
            </if>
            <if test="shippingCorpname != null">
                #{shippingCorpname,jdbcType=VARCHAR},
            </if>
            <if test="deliveryNo != null">
                #{deliveryNo,jdbcType=VARCHAR},
            </if>
            <if test="consignee != null">
                #{consignee,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="postCode != null">
                #{postCode,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="telephone != null">
                #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="needInvoide != null">
                #{needInvoide,jdbcType=BIT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="expireDate != null">
                #{expireDate,jdbcType=TIMESTAMP},
            </if>
            <if test="isExpire != null">
                #{isExpire,jdbcType=BIT},
            </if>
            <if test="paySn != null">
                #{paySn,jdbcType=VARCHAR},
            </if>
            <if test="paymentDate != null">
                #{paymentDate,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyDate != null">
                #{modifyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="isDelete != null">
                #{isDelete,jdbcType=TINYINT},
            </if>
            <if test="discount != null">
                #{discount,jdbcType=REAL},
            </if>
            <if test="rebateAmount != null">
                #{rebateAmount,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                #{status,jdbcType=BIT},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateByKey" parameterType="com.zlead.entity.OrderEntity">
        <!--
              common class -  @ET
          model 属性定义, do not modify.
        -->
        update t_order
        <set>
            <if test="sn != null">
                sn = #{sn,jdbcType=VARCHAR},
            </if>
            <if test="orderType != null">
                order_type = #{orderType,jdbcType=BIT},
            </if>
            <if test="buyType != null">
                buy_type = #{buyType,jdbcType=BIT},
            </if>
            <if test="shopId != null">
                shop_id = #{shopId,jdbcType=BIGINT},
            </if>
            <if test="shippingType != null">
                shipping_type = #{shippingType,jdbcType=BIT},
            </if>
            <if test="shopName != null">
                shop_name = #{shopName,jdbcType=VARCHAR},
            </if>
            <if test="payType != null">
                pay_type = #{payType,jdbcType=BIT},
            </if>
            <if test="goodsAmount != null">
                goods_amount = #{goodsAmount,jdbcType=DECIMAL},
            </if>
            <if test="shippingCost != null">
                shipping_cost = #{shippingCost,jdbcType=DECIMAL},
            </if>
            <if test="payableAmount != null">
                payable_amount = #{payableAmount,jdbcType=DECIMAL},
            </if>
            <if test="payPoint != null">
                pay_point = #{payPoint,jdbcType=BIGINT},
            </if>
            <if test="actualPayments != null">
                actual_payments = #{actualPayments,jdbcType=DECIMAL},
            </if>
            <if test="memberId != null">
                member_id = #{memberId,jdbcType=BIGINT},
            </if>
            <if test="memberName != null">
                member_name = #{memberName,jdbcType=VARCHAR},
            </if>
            <if test="shippingCorpno != null">
                shipping_corpno = #{shippingCorpno,jdbcType=VARCHAR},
            </if>
            <if test="shippingCorpname != null">
                shipping_corpname = #{shippingCorpname,jdbcType=VARCHAR},
            </if>
            <if test="deliveryNo != null">
                delivery_no = #{deliveryNo,jdbcType=VARCHAR},
            </if>
            <if test="consignee != null">
                consignee = #{consignee,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="postCode != null">
                post_code = #{postCode,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="telephone != null">
                telephone = #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="needInvoide != null">
                need_invoide = #{needInvoide,jdbcType=BIT},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="expireDate != null">
                expire_date = #{expireDate,jdbcType=TIMESTAMP},
            </if>
            <if test="isExpire != null">
                is_expire = #{isExpire,jdbcType=BIT},
            </if>
            <if test="paySn != null">
                pay_sn = #{paySn,jdbcType=VARCHAR},
            </if>
            <if test="paymentDate != null">
                payment_date = #{paymentDate,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyDate != null">
                modify_date = #{modifyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="isDelete != null">
                is_delete = #{isDelete,jdbcType=TINYINT},
            </if>
            <if test="discount != null">
                discount = #{discount,jdbcType=REAL},
            </if>
            <if test="rebateAmount != null">
                rebate_amount = #{rebateAmount,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=BIT},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="update">
        UPDATE t_order AS T SET
                  T.id = #{id} ,
                 T.sn = #{sn} ,
                 T.order_type = #{orderType} ,
                 T.buy_type = #{buyType} ,
                 T.shop_id = #{shopId} ,
                 T.shipping_type = #{shippingType} ,
                 T.shop_name = #{shopName} ,
                 T.pay_type = #{payType} ,
                 T.goods_amount = #{goodsAmount} ,
                 T.shipping_cost = #{shippingCost} ,
                 T.payable_amount = #{payableAmount} ,
                 T.pay_point = #{payPoint} ,
                 T.actual_payments = #{actualPayments} ,
                 T.member_id = #{memberId} ,
                 T.member_name = #{memberName} ,
                 T.shipping_corpno = #{shippingCorpno} ,
                 T.shipping_corpname = #{shippingCorpname} ,
                 T.delivery_no = #{deliveryNo} ,
                 T.consignee = #{consignee} ,
                 T.address = #{address} ,
                 T.post_code = #{postCode} ,
                 T.phone = #{phone} ,
                 T.telephone = #{telephone} ,
                 T.email = #{email} ,
                 T.need_invoide = #{needInvoide} ,
                 T.create_date = #{createDate} ,
                 T.expire_date = #{expireDate} ,
                 T.is_expire = #{isExpire} ,
                 T.pay_sn = #{paySn} ,
                 T.payment_date = #{paymentDate} ,
                 T.modify_date = #{modifyDate} ,
                 T.is_delete = #{isDelete} ,
                 T.discount = #{discount} ,
                 T.status = #{status} ,
                 T.remark = #{remark},
                 T.rebate_amount = #{rebateAmount},
                 T.price_type = #{priceType}
                WHERE T.ID = #{id}
    </update>

    <delete id="delete">
        DELETE FROM t_order WHERE  ID = #{id}
    </delete>

    <select id="findPage" parameterType="map" resultMap="orderimp">
        SELECT
        b.*,
        g.*
        FROM
        t_order AS b
        LEFT JOIN t_order_goods AS g ON g.order_id=b.id
        LEFT JOIN t_goods AS c ON g.goods_id = c.id
        LEFT JOIN crm_prd_model AS e ON c.model_id = e.model_id
        <where>
            1>0
            AND b.member_id=#{memberId}
            ORDER BY b.id DESC
        </where>
    </select>

    <select id="findSize" resultType="Integer">
        SELECT
        count(distinct b.id)
        FROM  t_order AS b
        INNER JOIN t_order_goods g ON b.id=g.order_id
        LEFT JOIN t_goods AS c ON g.goods_id = c.id

        <where>
            <if test="memberId!=null and @Ognl@isNotEmpty(memberId)">AND b.member_id=#{memberId}</if>
            <if test="status!=null and @Ognl@isNotEmpty(status)">AND b.`status`= #{status}</if>
        </where>
        AND b.is_delete =0
    </select>

    <select id="findTotalSize" resultType="Integer">
        SELECT
        count(distinct b.id)
        FROM  t_order AS b
        INNER JOIN t_order_goods g ON b.id=g.order_id
        LEFT JOIN t_goods AS c ON g.goods_id = c.id
        <where>
            <if test="memberId!=null and @Ognl@isNotEmpty(memberId)">AND b.member_id=#{memberId}</if>
        </where>
        AND b.is_delete =0
        AND b.status in(0,1,2,3);
    </select>



    
    <select id="findSizeb2" resultType="Integer">
        SELECT
        count(distinct b.id)
        FROM
        t_order_goods AS a
        LEFT JOIN t_order AS b ON a.order_id=b.id
        LEFT JOIN t_goods AS c ON a.goods_id = c.id
        <where>
            1>0
            <if test="memberId!=null and @Ognl@isNotEmpty(memberId)">AND b.member_id=#{memberId}</if>
            <if test="status!=null and @Ognl@isNotEmpty(status)">AND b.`status`= #{status}</if>
        </where>
        AND b.is_delete =0
    </select>

    <select id="getPage" parameterType="map" resultMap="orderimp">
        SELECT
        b.*,
        g.*
        FROM
        t_order AS b
        LEFT JOIN t_order_goods AS g ON g.order_id=b.id
        LEFT JOIN t_goods AS c ON g.goods_id = c.id
        LEFT JOIN crm_prd_model AS e ON c.model_id = e.model_id
        <where>
            1>0
            <if test="@Ognl@isNotEmpty(orderType)">AND b.order_type = #{orderType}</if>
            <if test="@Ognl@isNotEmpty(memberId)">AND b.member_id = #{memberId}</if>
            <if test="@Ognl@isNotEmpty(isDelete)">AND b.is_delete = #{isDelete}</if>
            <if test="@Ognl@isNotEmpty(status)">AND b.status = #{status}</if>
            <if test="@Ognl@isNotEmpty(shopId)">AND b.shop_id = #{shopId}</if>
            ORDER BY b.id DESC
        </where>
    </select>

    <select id="findNoVoucherOrder" parameterType="map" resultMap="orderMap">
        SELECT *  FROM t_order AS T
        WHERE
        T.member_id = #{memberId} and T.voucher_id is null
    </select>

    <select id="getAllnoVoucherOrderList" parameterType="map" resultMap="orderMap">
        SELECT *  FROM t_order AS T
        WHERE
        T.member_id in (#{memberIds}) and T.voucher_id is null AND T.is_delete =0 AND STATUS != 4
    </select>


    <select id="findById" resultMap="orderMap" useCache="false">
        SELECT * FROM t_order AS T WHERE  T.ID = #{id}
    </select>

    <select id="findBySn" resultMap="orderMap" useCache="false">
        SELECT * FROM t_order AS T WHERE  T.sn = #{sn}
    </select>

    <select id="findPageOrderVo" parameterType="map" resultMap="orderVo" useCache="false">
        SELECT
        a.*
        FROM
        t_order AS b
        LEFT JOIN t_order_goods AS a ON a.order_id = b.id
        LEFT JOIN t_goods AS c ON a.goods_id = c.id
        <where>
            <if test="@Ognl@isNotEmpty(orderType)">AND T.order_type = #{orderType}</if>
            <if test="@Ognl@isNotEmpty(memberId)">AND T.member_id = #{memberId}</if>
            <if test="@Ognl@isNotEmpty(isDelete)">AND T.is_delete = #{isDelete}</if>
            <if test="@Ognl@isNotEmpty(status)">AND T.status = #{status}</if>
            <if test="@Ognl@isNotEmpty(shopId)">AND T.shop_id = #{shopId}</if>
        </where>
    </select>

    <select id="findOrderSeven" resultMap="orderMap">
        SELECT * FROM t_order T WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) &gt;= FROM_UNIXTIME(T.payment_date)
         AND T.status = 1 AND T.order_type IN (0,10)
    </select>

    <select id="findOrderList" resultMap="orderMap">
        SELECT * FROM t_order T
        <where>
            1=1
            <if test="@Ognl@isNotEmpty(orderType)">AND T.order_type = #{orderType}</if>
            <if test="@Ognl@isNotEmpty(memberId)">AND T.member_id = #{memberId}</if>
            <if test="@Ognl@isNotEmpty(isDelete)">AND T.is_delete = #{isDelete}</if>
            <if test="@Ognl@isNotEmpty(status)">AND T.status = #{status}</if>
            <if test="@Ognl@isNotEmpty(shopId)">AND T.shop_id = #{shopId}</if>
        </where>
        AND status != 4 AND is_delete =0
    </select>

    <select id="findSellOrderList" resultMap="orderMap" useCache="false">
        SELECT
        *
        FROM
        t_order
        WHERE
        (
        t_order.shop_id IN
        (
        SELECT
        t_shop.id
        FROM
        t_shop
        WHERE
        t_shop.member_id = #{memberId}
        )
        )

        AND
        ( t_order. STATUS = #{status})

    </select>

    <select id="findSellOrderListByPage2" resultMap="orderMap" useCache="false">
        SELECT DISTINCT
        b.*,sum(a.count) as goodscnt
        FROM
        t_order AS b
        LEFT JOIN t_order_goods AS a ON a.order_id=b.id
        WHERE
        (
        b.shop_id IN
        (
        SELECT
        t_shop.id
        FROM
        t_shop
        WHERE
        t_shop.member_id = #{memberId}
        )
        )
        <if test="@Ognl@isNotEmpty(status)">AND b.STATUS = #{status}</if>
        <if test="@Ognl@isNotEmpty(sn)">AND b.SN = #{sn}</if>
        GROUP BY b.id order by b.create_date desc
    </select>


    <select id="findSellOrderListByPage" resultMap="orderimp" useCache="false">
        SELECT DISTINCT
        b.*,sum(a.count) as goodscnt,a.*
        FROM
        t_order AS b
        left join
        t_member as m on b.member_id=m.id
        left join
        oa_agent_mas as a on a.agent_id = m.agent_id
        WHERE

        b.shop_id IN
        (
        SELECT
        t_shop.id
        FROM
        t_shop
        WHERE
        t_shop.member_id = #{memberId}
        )

        <if test="@Ognl@isNotEmpty(status)">AND b.STATUS = #{status}</if>
        <if test="@Ognl@isNotEmpty(sn)">AND b.SN = #{sn}</if>
        GROUP BY b.id order by b.create_date desc
    </select>

    <select id="getOrderInfoCus" resultType="com.zlead.entity.OrderEntity">
    SELECT
	a.*
    FROM
	t_order AS b
	LEFT JOIN t_order_goods AS a ON a.order_id = b.id
	LEFT JOIN t_goods AS c ON a.goods_id = c.id
	 WHERE b.member_id =#{memberId} and a.is_delete =0
    </select>
    <update id="updateorder">
        UPDATE t_order AS a SET
                a.is_delete = #{isDelete}
                WHERE a.id = #{id}
    </update>

    <select id="getOrderInfoId" resultMap="orderimp">
    SELECT a.* FROM t_order AS a WHERE a.id = #{id} limit 0,1
    </select>

    <select id="getOrderInfoSta" resultMap="orderMap">
    SELECT a.* FROM t_order AS a WHERE a.member_id = #{memberId} and  a.status=#{status} and a.is_delete =0
    </select>

    <update id="updateVoucher">
        UPDATE t_order AS T SET
        T.voucher_id = #{voucherId}
        WHERE T.id in
        <foreach collection="orderIds" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <select id="findPageSt" parameterType="map" resultMap="orderimp">
        SELECT
        b.*,
        g.*,
        e.model_name
        FROM
        t_order AS b
        LEFT JOIN t_order_goods AS g ON g.order_id=b.id
        LEFT JOIN t_goods AS c ON g.goods_id = c.id
        LEFT JOIN crm_prd_model AS e ON c.model_id = e.model_id
        <where>
            1=1
            <if test="status!=null and @Ognl@isNotEmpty(status)">AND b.`status`= #{status}</if>
            <if test="memberId!=null and @Ognl@isNotEmpty(memberId)">AND b.member_id=#{memberId}</if>
        </where>
        and b.is_delete =0
        order by b.create_date desc, b.modify_date desc
    </select>

    <select id="findPageSt2" parameterType="map" resultMap="newOrderMap">
        SELECT DISTINCT
        b.*
        FROM
        t_order AS b
        INNER JOIN t_order_goods AS g ON b.id = g.order_id
        LEFT  JOIN  t_goods AS c ON g.goods_id = c.id
        where b.status IN (0,1,2,3)
        AND b.is_delete=0
        <if test="@Ognl@isNotEmpty(memberId)">AND member_id=#{memberId}</if>
        order by b.create_date desc, b.modify_date desc
    </select>

    <select id="findOderListByStatus" parameterType="map" resultMap="newOrderMap">
        SELECT DISTINCT
        b.*
        FROM
        t_order AS b
        INNER JOIN t_order_goods AS g ON b.id = g.order_id
        LEFT  JOIN  t_goods AS c ON g.goods_id = c.id
        <where>
            1=1
            <if test="status!=null and @Ognl@isNotEmpty(status)">AND b.`status`= #{status}</if>
            <if test="memberId!=null and @Ognl@isNotEmpty(memberId)">AND b.member_id=#{memberId}</if>
        </where>

        AND b.is_delete=0
        order by b.create_date desc, b.modify_date desc

    </select>


    <select id="findOrderGoods" resultMap="orderGoodsMap">
        SELECT g.*, c.*, e.model_name
        FROM t_order_goods AS g
        left JOIN t_goods AS c
          ON g.goods_id = c.id
        LEFT JOIN crm_prd_model AS e
          ON c.model_id = e.model_id
        WHERE g.order_id
        IN
        <foreach collection="orderIdList" item="orderId" open="(" close=")" separator=",">
            #{orderId}
        </foreach>
    </select>

    <select id="getOrderTotalAmount" resultType="java.math.BigDecimal">
       SELECT SUM(a.goods_amount) FROM  t_order as a where a.shop_id=#{shopId}
    </select>

    <select id="getOrderTotalCount" resultType="Long">
       SELECT count(*) FROM  t_order as a where a.shop_id=#{shopId}
    </select>

    <select id="getIndexInfo" resultType="java.util.Map">
        select s.customerCount,v.orderCount,t.totalAmountWeek,t.totalCountWeek,p.finishAmountWeek/z.totalAmtWeek AS finishRateWeek,
        m.totalAmountMonth,m.totalCountMonth,r.finishAmountMonth/x.totalAmtMonth AS finishRateMonth,
        n.totalAmountSeason,n.totalCountSeason,u.finishAmountSeason/y.totalAmtSeason AS finishRateSeason
        from
        (select  count(a.agent_id) customerCount from oa_agent_mas as a
		left join t_agent_fac as b on a.agent_id = b.agent_id
		left join t_member as mem on mem.own_shopid=b.sys_id
	    where mem.id=#{memberId} and b.status=1) s,

		(select count(b.id) AS orderCount
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{memberId})) v,


		(SELECT SUM(b.goods_amount) AS totalAmountWeek,count(b.id) AS totalCountWeek
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{memberId})
        and YEARWEEK(date_format(b.create_date,'%Y-%m-%d')) = YEARWEEK(now())) t,

        (SELECT SUM(b.goods_amount) AS totalAmountMonth,count(b.id) AS totalCountMonth
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{memberId})
        and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )) m,

        (SELECT SUM(b.goods_amount) AS totalAmountSeason,count(b.id) AS totalCountSeason
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{memberId})
        and QUARTER(b.create_date)=QUARTER(now())) n,

        (SELECT SUM(b.goods_amount) AS finishAmountWeek
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{memberId}) and b.status=3
        and YEARWEEK(date_format(b.create_date,'%Y-%m-%d')) = YEARWEEK(now())) p,


        (SELECT SUM(b.goods_amount) AS finishAmountMonth
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{memberId}) and b.status=3
        and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )) r,


        (SELECT SUM(b.goods_amount) AS finishAmountSeason
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{memberId}) and b.status=3
        and QUARTER(b.create_date)=QUARTER(now())) u,
        (select sum(a.task_amt)*10000/12  AS totalAmtMonth from t_agent_fac as a where a.sys_id in (select own_shopid from t_member where id=#{memberId})) x,
        (select sum(a.task_amt)*10000/4  AS totalAmtSeason from t_agent_fac as a where a.sys_id in (select own_shopid from t_member where id=#{memberId})) y,
        (select sum(a.task_amt)*10000/52  AS totalAmtWeek from t_agent_fac as a where a.sys_id in (select own_shopid from t_member where id=#{memberId})) z


    </select>

    <select id="getIndexInfoAuth" resultType="java.util.Map">
        select s.customerCount,v.orderCount,t.totalAmountWeek,t.totalCountWeek,
        m.totalAmountMonth,m.totalCountMonth,
        n.totalAmountSeason,n.totalCountSeason,
        x.totalAmtMonth,y.totalAmtSeason,z.totalAmtWeek
        from
        (SELECT
        count(mas.agent_id) as customerCount
        FROM
        oa_agent_mas mas
        LEFT JOIN t_agent_fac fac ON mas.agent_id = fac.agent_id
        where fac.status=1 and fac.sys_id in (select own_shopid from t_member where id =#{id})
        <if test="memberIds != null and memberIds.size>0">
        and fac.user_id IN
        (select
        b.user_id from t_member as a,acl_user as b where a.username = b.login_name
        and a.id in
        <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
            #{memberId}
        </foreach>
        )
        </if>
	    ) s,

		(select count(b.id) AS orderCount
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{id})
        <if test="memberIds != null and memberIds.size>0">
            and m.id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        )  v,


		(SELECT SUM(b.goods_amount) AS totalAmountWeek,count(b.id) AS totalCountWeek
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{id})
        <if test="memberIds != null and memberIds.size>0">
            and m.id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        and YEARWEEK(date_format(b.create_date,'%Y-%m-%d')) = YEARWEEK(now())) t,

        (SELECT SUM(b.goods_amount) AS totalAmountMonth,count(b.id) AS totalCountMonth
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{id})
        <if test="memberIds != null and memberIds.size>0">
            and m.id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )) m,

        (SELECT SUM(b.goods_amount) AS totalAmountSeason,count(b.id) AS totalCountSeason
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id =#{id})
        <if test="memberIds != null and memberIds.size>0">
            and m.id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        and QUARTER(b.create_date)=QUARTER(now())) n,

        (select sum(a.task_amt)*10000/12  AS totalAmtMonth from t_agent_fac as a where a.sys_id in (select own_shopid from t_member where id=#{id})
        <if test="memberIds != null and memberIds.size>0">
            and a.member_id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        ) x,
        (select sum(a.task_amt)*10000/4  AS totalAmtSeason from t_agent_fac as a where a.sys_id in (select own_shopid from t_member where id=#{id})
        <if test="memberIds != null and memberIds.size>0">
            and a.member_id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        ) y,
        (select sum(a.task_amt)*10000/52  AS totalAmtWeek from t_agent_fac as a where a.sys_id in (select own_shopid from t_member where id=#{id})
        <if test="memberIds != null and memberIds.size>0">
            and a.member_id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        ) z
    </select>


    <select id="findAppOrderListByPage" resultMap="orderListVo">
        select b.id,b.sn,a.agent_id,a.agent_name,1 as pay_type,b.goods_amount,b.shipping_cost,b.status,d.fact_id
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        left join oa_factory_info as d on d.shop_id = b.shop_id
        where b.shop_id in (select own_shopid from t_member where id=#{memberId})
        <if test="agentId!=null and agentId!=''">
              AND a.agent_id = #{agentId}
        </if>
        <if test="status!=null and status!=''">AND b.STATUS = #{status}</if>
        <if test="sn!=null and sn!=''">AND b.SN = #{sn}</if>

        <choose>
            <when test="time!=null and time!=''">
                <choose>
                    <when test="time== 30">
                        and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
                    </when>
                    <when test="time== 1">
                        and  to_days(b.create_date) = to_days(now())
                    </when>
                    <when test="time== 7">
                        and  YEARWEEK(date_format(b.create_date,'%Y-%m-%d')) = YEARWEEK(now())
                    </when>
                </choose>
            </when>
            <otherwise>
                and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
            </otherwise>
        </choose>
        order by b.create_date desc
    </select>

    <!-- app 应用 -->
    <select id="findAppOrderDetail" resultMap="orderDetailVo">
        select b.id,b.sn,a.agent_id,a.agent_name,1 as pay_type,b.goods_amount,b.shipping_cost,b.status,b.create_date,a.link_name,a.link_tel,
        CONCAT(e.t_region_NAME, f.t_region_NAME,g.t_region_NAME,d.address) as agentAddr,
        b.shipping_type,
        b.payment_date
        from t_order as b
        left join
        t_member as m on b.member_id=m.id
        left join
        oa_agent_mas as a on a.agent_id = m.agent_id
        left join
        t_member_address as d on d.member_id=m.id
        left join
        t_region as e on e.t_region_CODE=d.province_id
        left join
        t_region as f on f.t_region_CODE=d.city_id
        left join
        t_region as g on g.t_region_CODE=d.region_id
        where b.id=#{orderId}
        order by b.create_date desc
    </select>

    <select id="findOrderListCount" resultMap="orderCountVo">
        select b.status,count(b.id) as ordercnt
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.status=#{status} and b.shop_id in (select own_shopid from t_member where id=#{memberId})
        <if test="sn!=null and sn!=''">and b.SN = #{sn}</if>
        <if test="agentId!=null and agentId!=''">
            AND a.agent_id = #{agentId}
        </if>
        <choose>
            <when test="time!=null and time!=''">
                <choose>
                    <when test="time== 30">
                        and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
                    </when>
                    <when test="time== 1">
                        and  to_days(b.create_date) = to_days(now())
                    </when>
                    <when test="time== 7">
                        and  YEARWEEK(date_format(b.create_date,'%Y-%m-%d')) = YEARWEEK(now())
                    </when>
                </choose>
            </when>
            <otherwise>
                and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
            </otherwise>
        </choose>
        order by b.create_date desc
    </select>

    <select id="findStatisticsOrderListCount" resultType="java.lang.Integer">
        select count(b.id) from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id=#{memberId})
        <if test="timeType== 'month'">and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )</if>
    </select>

    <select id="countOrderAmountByAgentId" resultType="java.math.BigDecimal">
        SELECT
            SUM( goods_amount ) totalAmount
        FROM
            t_order
        WHERE
            member_id IN ( SELECT id FROM t_member WHERE agent_id = #{agentId} ) and shop_id = #{shopId}
    </select>

    <select id="countOrderNumberByAgentId" resultType="java.lang.Integer">
        SELECT
            COUNT( DISTINCT id ) totalNumber
        FROM
            t_order
        WHERE
            member_id IN ( SELECT id FROM t_member WHERE agent_id = #{agentId} ) and shop_id = #{shopId}
    </select>

    <select id="countWaitReturnOrderAmountByAgentId" resultType="java.math.BigDecimal">
        SELECT
            SUM( goods_amount ) waitReturnAmount
        FROM
            t_order
        WHERE
            member_id IN ( SELECT id FROM t_member WHERE agent_id = #{agentId} )
            AND shop_id = #{shopId}
            AND buy_type = 4
            AND voucher_id IS NULL
    </select>

    <select id="queryWaitReturnOrderByAgentId" resultMap="orderListVo">
        SELECT
            o.id,
            o.sn,
            a.agent_id,
            a.agent_name,
            o.pay_type,
            o.goods_amount,
            case when o.shipping_cost is NULL then 0 else o.shipping_cost end shipping_cost,
            o.status,
            b.fact_id
        FROM
            t_order o
            LEFT JOIN t_member m ON o.member_id = m.id
            LEFT JOIN oa_agent_mas a ON a.agent_id = m.agent_id
            LEFT JOIN oa_factory_info b ON o.shop_id = b.shop_id
        WHERE
            m.agent_id = #{agentId}
            AND o.shop_id = #{shopId}
            AND o.buy_type IN ( 1, 2 )
            AND o.voucher_id IS NULL
    </select>

    <select id="queryOrderByAgentId" resultMap="orderListVo">
        SELECT
            o.id,
            o.sn,
            a.agent_id,
            a.agent_name,
            o.pay_type,
            o.goods_amount,
            case when o.shipping_cost is NULL then 0 else o.shipping_cost end shipping_cost,
            o.status
        FROM
            t_order o
            LEFT JOIN t_member m ON o.member_id = m.id
            LEFT JOIN oa_agent_mas a ON a.agent_id = m.agent_id
        WHERE
            m.agent_id = #{agentId}
            AND o.shop_id = #{shopId}
    </select>
    <update id="orderovid">
        UPDATE t_order SET `status` = 3 WHERE id =#{id}
    </update>

    <sql id="agentBillsFromSql">
        FROM
            t_order o
        LEFT JOIN t_member m ON o.member_id = m.id
        LEFT JOIN oa_agent_mas mas ON mas.agent_id = m.agent_id
        LEFT JOIN t_agent_fac f ON mas.agent_id = f.agent_id
        LEFT JOIN crm_cust_level LEVEL ON LEVEL.level_id = f.level_id
    </sql>

    <sql id="agentBillsWhereSql">
        <where>
            1 = 1
            <if test="agentCustIds != null">
                and mas.agent_id in
                <foreach collection="agentCustIds" open="(" separator="," close=")" item="item" index="index">
                    #{item}
                </foreach>
            </if>
            <if test="levelId != null">
                and f.level_id = #{levelId}
            </if>
            <if test="beginDate != null and endDate != null">
                and o.create_date BETWEEN #{beginDate} and #{endDate}
            </if>
            <if test="shopId != null">
                and o.shop_id = #{shopId}
            </if>
        </where>
    </sql>

    <select id="countAgentBills" resultType="java.lang.Integer">
        SELECT
        count(DISTINCT o.id)
        <include refid="agentBillsFromSql"></include>
        <include refid="agentBillsWhereSql"></include>
    </select>

    <select id="countClosedAgentBills" resultType="java.lang.Integer">
        SELECT
        count(DISTINCT o.id)
        <include refid="agentBillsFromSql"></include>
        <include refid="agentBillsWhereSql"></include>
        and o.voucher_id is NULL
    </select>

    <select id="countNotClosedAgentBills" resultType="java.lang.Integer">
        SELECT
        count(DISTINCT o.id)
        <include refid="agentBillsFromSql"></include>
        <include refid="agentBillsWhereSql"></include>
        and o.voucher_id is not NULL
    </select>

    <select id="agentBills" resultType="com.zlead.entity.vo.AgentBillListVO">
        SELECT
        mas.agent_id agentId,
        mas.link_name agentName,
        o.id orderId,
        o.sn sn,
        o.goods_amount totalAmount,
        o.create_date tradeTime,
        CASE
        WHEN o.voucher_id IS NOT NULL THEN 1
        ELSE 2
        END STATUS
        <include refid="agentBillsFromSql"></include>
        <include refid="agentBillsWhereSql"></include>
    </select>

    <select id="findAppOrderListByPageAuth" resultMap="orderListVo">
        select b.id,b.sn,a.agent_id,a.agent_name,1 as pay_type,b.goods_amount,b.shipping_cost,b.status,d.fact_id
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        left join oa_factory_info as d on d.shop_id = b.shop_id
        where b.shop_id in (select own_shopid from t_member where id=#{id})
        <if test="memberIds != null and memberIds.size>0">
            and m.id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        <if test="agentId!=null and agentId!=''">
            AND a.agent_id = #{agentId}
        </if>
        <if test="status!=null and status!=''">AND b.STATUS = #{status}</if>
        <if test="sn!=null and sn!=''">AND b.SN = #{sn}</if>

        <choose>
            <when test="time!=null and time!=''">
                <choose>
                    <when test="time== 30">
                        and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
                    </when>
                    <when test="time== 1">
                        and  to_days(b.create_date) = to_days(now())
                    </when>
                    <when test="time== 7">
                        and  YEARWEEK(date_format(b.create_date,'%Y-%m-%d')) = YEARWEEK(now())
                    </when>
                </choose>
            </when>
            <otherwise>
                and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
            </otherwise>
        </choose>
        order by b.create_date desc
    </select>

    <select id="findOrderListCountAuth" resultMap="orderCountVo">
        select b.status,count(b.id) as ordercnt
        from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.status=#{status} and b.shop_id in (select own_shopid from t_member where id=#{id})
        <if test="memberIds != null and memberIds.size>0">
            and m.id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        <if test="sn!=null and sn!=''">and b.SN = #{sn}</if>
        <if test="agentId!=null and agentId!=''">
            AND a.agent_id = #{agentId}
        </if>
        <choose>
            <when test="time!=null and time!=''">
                <choose>
                    <when test="time== 30">
                        and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
                    </when>
                    <when test="time== 1">
                        and  to_days(b.create_date) = to_days(now())
                    </when>
                    <when test="time== 7">
                        and  YEARWEEK(date_format(b.create_date,'%Y-%m-%d')) = YEARWEEK(now())
                    </when>
                </choose>
            </when>
            <otherwise>
                and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
            </otherwise>
        </choose>
        order by b.create_date desc
    </select>

    <select id="findStatisticsOrderListCountAuth" resultType="java.lang.Integer">
        select count(b.id) from t_order as b
        left join t_member as m on b.member_id=m.id
        left join oa_agent_mas as a on a.agent_id= m.agent_id
        where b.shop_id in (select own_shopid from t_member where id=#{id})
        <if test="memberIds != null and memberIds.size>0">
            and m.id IN
            <foreach collection="memberIds" item="memberId" open="(" close=")" separator=",">
                #{memberId}
            </foreach>
        </if>
        <if test="timeType== 'month'">and DATE_FORMAT( b.create_date, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )</if>
    </select>
</mapper>